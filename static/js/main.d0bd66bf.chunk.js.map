{"version":3,"sources":["App.js","Calbutton.js","Result.js","Switchmode.js","serviceWorker.js","index.js"],"names":["App","buttonpressed","buttonName","calculate","reset","setState","result","state","Math","sqrt","abs","prevInput","operator","currInput","eval","clickHandler","mtoggle","toggle","current","Lightmode","React","createRef","className","this","toggleclass","buttonPressed","onClick","ref","Component","Calbutton","props","Toggle","prevState","scmode","e","target","name","Result","Switchmode","modeToggle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0bd66bf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Calbutton from './Calbutton.js';\nimport Result from './Result.js';\nimport Switchmode from './Switchmode.js';\nimport './App.css';\nclass App extends Component {\n  constructor(){\n    super()\n    this.toggle = React.createRef();\n    this.state = {\n      prevInput: \"\",\n      currInput: \"\",\n      result: \"0\",\n      operator: \"\",\n      mtoggle:\"\"\n    }\n  }\n  buttonpressed  = buttonName => {\n    if(buttonName === \"=\"){\n      this.calculate();\n    }\n    else if(buttonName === \"C\"){\n      this.reset();\n    }\n    else if(buttonName === \"sq\"){\n      this.setState({\n        result:this.state.result * this.state.result\n      })\n    }\n    else if(buttonName === \"sqrt\"){\n      this.setState({\n        result:Math.sqrt(this.state.result)\n      })\n    }\n    else if(buttonName === \"flip\"){\n      this.setState({\n        result: `${this.state.result > 0 \n                ? -Math.abs(this.state.result) \n                : Math.abs(this.state.result)}`\n      })\n    }\n    else{\n      if(buttonName >= 0 && buttonName <= 9)\n      {\n        this.setState({\n          prevInput: `${this.state.operator === \"\" \n                      ? this.state.prevInput + buttonName \n                      : this.state.prevInput}`,\n          result: `${this.state.operator !== \"\" \n                    ? this.state.currInput + buttonName \n                    : this.state.prevInput + buttonName}`,\n          currInput: `${this.state.operator !== \"\" \n                      ? this.state.currInput + buttonName \n                      : this.state.currInput}`\n        });\n      }\n      else if(\n        buttonName === \"+\" || buttonName === \"-\" || buttonName === \"*\" || buttonName === \"/\")\n        {\n          this.setState({ \n            result:`${((this.state.prevInput !== \"\") && (this.state.operator !== \"\") && \n                    (this.state.currInput !== \"\")) \n                    ? eval(`${this.state.prevInput}${this.state.operator}${this.state.currInput}`)\n                    : this.state.prevInput}`,\n            operator:buttonName,\n          },\n            () => \n            {\n              this.setState({\n                prevInput:this.state.result,\n                currInput: \"\"\n              });\n            }\n          );\n        }\n    }\n  }\n  calculate = () =>{\n    try{\n      this.setState({\n      result: eval(`${this.state.prevInput}${this.state.operator}${this.state.currInput}`)\n      });\n    }\n    catch{\n      this.setState({\n        result: \"error\"\n      });\n    }\n  }\n  reset = () => {\n    this.setState({\n      result: \"0\"\n    });\n  }\n  clickHandler = () => {\n    this.setState({\n      mtoggle: `${this.toggle.current.state.Lightmode}`\n    });\n  }\n  render(){\n    return (\n      <div className={(this.state.mtoggle === \"true\") ? \"Appt\" : \"App\"}> \n        <div className=\"calc-body\"> \n          <Result result={this.state.result} toggleclass={this.state.mtoggle}/>\n          <Calbutton buttonPressed = {this.buttonpressed} toggleclass={this.state.mtoggle}/>\n        </div>\n        <div onClick={this.clickHandler}>\n          <Switchmode ref={this.toggle}/> \n        </div>  \n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\nclass Calbutton extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            scmode: false\r\n        }\r\n    }    \r\n    Toggle = () => {\r\n        this.setState(prevState => ({\r\n            scmode: !prevState.scmode\r\n        }))\r\n    }\r\n    buttonPressed = e => {\r\n        this.props.buttonPressed(e.target.name);\r\n    }\r\n    render(){\r\n        return (\r\n            <>\r\n                <div className={(this.props.toggleclass === \"true\") ? \"buttonst\" : \"buttons\"}>\r\n                    <button name=\"1\" onClick={this.buttonPressed}>1</button>\r\n                    <button name=\"2\" onClick={this.buttonPressed}>2</button>\r\n                    <button name=\"3\" onClick={this.buttonPressed}>3</button>\r\n                    <button name=\"+\" onClick={this.buttonPressed}>+</button>\r\n                    <button name=\"4\" onClick={this.buttonPressed}>4</button>\r\n                    <button name=\"5\" onClick={this.buttonPressed}>5</button>\r\n                    <button name=\"6\" onClick={this.buttonPressed}>6</button>\r\n                    <button name=\"-\" onClick={this.buttonPressed}>-</button>\r\n                    <button name=\"7\" onClick={this.buttonPressed}>7</button>\r\n                    <button name=\"8\" onClick={this.buttonPressed}>8</button>\r\n                    <button name=\"9\" onClick={this.buttonPressed}>9</button> \r\n                    <button name=\"*\" onClick={this.buttonPressed}>*</button>\r\n                    <button name=\"C\" onClick={this.buttonPressed}>C</button>\r\n                    <button name=\"0\" onClick={this.buttonPressed}>0</button>\r\n                    <button name=\"=\" onClick={this.buttonPressed}>=</button>\r\n                    <button name=\"/\" onClick={this.buttonPressed}>/</button>\r\n                    {this.state.scmode ? \r\n                        (<>\r\n                            <button name=\"sqrt\" onClick={this.buttonPressed} className=\"scbutton\">\r\n                                square root\r\n                            </button> \r\n                            <button name=\"sq\" onClick={this.buttonPressed} className=\"scbutton\">\r\n                                square\r\n                            </button>\r\n                            <button name=\"flip\" onClick={this.buttonPressed} className=\"scbutton\">\r\n                                flip\r\n                            </button>\r\n                        </>) :\r\n                        (\"\")\r\n                    }\r\n                </div>\r\n                <div>\r\n                    <button onClick={this.Toggle} className={this.state.scmode ? \r\n                        \"acscientific\" :\"scientific\"}>\r\n                            Scientific Mode\r\n                    </button>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calbutton;\r\n","import React, { Component } from 'react';\r\n\r\nclass Result extends Component{\r\n    render(){\r\n        return (\r\n            <div className={(this.props.toggleclass === \"true\") ? \"resultt\" : \"result\"}>\r\n                {this.props.result}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Result;\r\n","import React, { Component } from 'react';\r\n\r\nclass Switchmode extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            Lightmode: true\r\n        }\r\n    }\r\n    \r\n    modeToggle = () => {\r\n        this.setState(prevState => ({\r\n            Lightmode: !prevState.Lightmode\r\n        }))\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"modes\">\r\n                <button onClick={this.modeToggle} className={this.state.Lightmode ? \r\n                \"activeMode\" : \"\"}>\r\n                    Light Mode\r\n                </button>\r\n                <button onClick={this.modeToggle} className={this.state.Lightmode ? \r\n                \"\" : \"activeMode\"}>\r\n                    Dark Mode\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Switchmode;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}